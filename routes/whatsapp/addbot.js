function _0x2fca(_0x231304, _0x28a319) { const _0x54a9e1 = _0x54a9(); return _0x2fca = function (_0x2fca28, _0x5da8b1) { _0x2fca28 = _0x2fca28 - 0xa8; let _0x3913fe = _0x54a9e1[_0x2fca28]; return _0x3913fe; }, _0x2fca(_0x231304, _0x28a319); } const _0x2edada = _0x2fca; (function (_0x2030f8, _0x1aaeb9) { const _0x28257e = _0x2fca, _0x2f3eca = _0x2030f8(); while (!![]) { try { const _0x348ec2 = parseInt(_0x28257e(0xf1)) / 0x1 + parseInt(_0x28257e(0xb6)) / 0x2 * (parseInt(_0x28257e(0xe6)) / 0x3) + parseInt(_0x28257e(0xc8)) / 0x4 * (-parseInt(_0x28257e(0xc1)) / 0x5) + -parseInt(_0x28257e(0xbd)) / 0x6 * (parseInt(_0x28257e(0xb7)) / 0x7) + -parseInt(_0x28257e(0xde)) / 0x8 * (parseInt(_0x28257e(0xeb)) / 0x9) + -parseInt(_0x28257e(0xe5)) / 0xa * (-parseInt(_0x28257e(0xef)) / 0xb) + parseInt(_0x28257e(0xf3)) / 0xc * (parseInt(_0x28257e(0xcc)) / 0xd); if (_0x348ec2 === _0x1aaeb9) break; else _0x2f3eca['push'](_0x2f3eca['shift']()); } catch (_0x51eecd) { _0x2f3eca['push'](_0x2f3eca['shift']()); } } }(_0x54a9, 0xd699b)); function _0x54a9() { const _0x3a0e0c = ['SELECT\x20*\x20FROM\x20user\x20WHERE\x20uid\x20=\x20\x27', 'key', 'text', 'end', '.json', '80EYpEkU', '1059522TQFvXo', 'jsonwebtoken', '\x20only', 'word_left', 'openai_key', '6404202bTbCgj', 'text-ada-001', 'DELETE\x20FROM\x20instance\x20WHERE\x20client_id\x20=\x20\x27', 'remoteJid', '589226NhzpnW', 'This\x20instance\x20was\x20not\x20longer\x20active,\x20Please\x20choose\x20another', '1053776htLpzU', 'concat', '72UlLnYW', 'word_limit', 'bots', 'Request\x20has\x20been\x20sent\x20check\x20status\x20in\x20bot\x20history.', 'body', 'text-curie-001', 'toLowerCase', 'split', '1.0', 'conversation', 'map', '\x27\x20WHERE\x20uid\x20=\x20\x27', 'query', 'INSERT\x20INTO\x20bot\x20(uid,\x20unique_id,\x20client_id,\x20status)\x20VALUES\x20(\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x27', 'footer_text', 'outgoing', 'text-davinci-003', 'bot_power', 'client_id', 'UPDATE\x20user\x20SET\x20bot_status\x20=\x20\x27close\x20due\x20to\x20insufficient\x20words\x20left\x27,\x20word_left\x20=\x20\x270\x27\x20WHERE\x20uid\x20=\x20\x27', '8ptArNM', '777evoscE', 'allow_ai', 'log', 'connection.update', 'openai', 'uid', '14676udyOgr', '../../middlewares/user', 'run', 'output', '8506795cckpwh', 'sendMessage', 'json', 'incoming', 'UPDATE\x20user\x20SET\x20bot_status\x20=\x20\x27running\x27,\x20word_left\x20=\x20\x27', 'unique_id', '../../config/promisemysql', '4OlayYc', 'limit_reply', 'FFA', 'readMessages', '2990052bIGkcj', 'opned\x20connection', 'fromMe', 'includes', 'reply', '\x0a\x0a\x0a', '/../../sessions/', 'createCompletion', 'text-babbage-001', 'close', 'express', 'decode', 'message', 'plan', 'success', 'length', '@adiwajshing/baileys', 'notify', '16xhkGHS', 'if\x20you\x20are\x20an\x20\x22']; _0x54a9 = function () { return _0x3a0e0c; }; return _0x54a9(); } const { default: makeWASocket, DisconnectReason, useSingleFileAuthState } = require(_0x2edada(0xdc)), router = require(_0x2edada(0xd6))['Router'](), promisemysql = require(_0x2edada(0xc7)), { sign } = require(_0x2edada(0xe7)), { isuser, checkwhatsapp } = require(_0x2edada(0xbe)), fs = require('fs'), pino = require('pino'), botpower = [_0x2edada(0xec), _0x2edada(0xec), _0x2edada(0xd4), 'text-curie-001', _0x2edada(0xb2)], { Configuration, OpenAIApi } = require(_0x2edada(0xbb)); async function run(_0x55b949, _0x13914a) { const _0xc915a9 = _0x2edada; try { const _0x24563d = botpower[_0x55b949['plan'][_0xc915a9(0xb3)]], _0x172920 = _0x55b949[_0xc915a9(0xd9)]; function _0x8cf2e7(_0x3183fc) { return new Promise(async (_0x2ce524, _0x3c203e) => { const _0x3afeb4 = _0x2fca; try { const _0x316dc5 = new Configuration({ 'apiKey': _0x55b949[_0x3afeb4(0xea)] }), _0x3ba801 = new OpenAIApi(_0x316dc5), _0x1248ac = await _0x3ba801[_0x3afeb4(0xd3)]({ 'model': _0x24563d, 'prompt': '' + _0x3183fc, 'temperature': 0.2, 'max_tokens': _0x24563d === _0x3afeb4(0xec) && _0x172920[_0x3afeb4(0xf4)] > 0x7d0 ? 0x7d0 : _0x172920['word_limit'] || _0x24563d === _0x3afeb4(0xd4) && _0x172920['word_limit'] > 0x7d0 ? 0x7d0 : _0x172920[_0x3afeb4(0xf4)] || _0x24563d === _0x3afeb4(0xf8) && _0x172920[_0x3afeb4(0xf4)] > 0x7d0 ? 0x7d0 : _0x172920['word_limit'] || _0x24563d === 'text-davinci-003' && _0x172920[_0x3afeb4(0xf4)] > 0xbb8 ? 0xbb8 : _0x172920[_0x3afeb4(0xf4)], 'top_p': 0x1, 'frequency_penalty': 0x0, 'presence_penalty': 0x0 }); _0x2ce524({ 'success': !![], 'reply': _0x1248ac['data']['choices'][0x0][_0x3afeb4(0xe2)] }); } catch (_0x13b14f) { console[_0x3afeb4(0xb9)](_0x13b14f); } }); } const _0x4f3e8b = _0x55b949['body'][_0xc915a9(0xb4)], _0x280b24 = _0x55b949[_0xc915a9(0xf7)][_0xc915a9(0xf5)], _0x1ed041 = __dirname + _0xc915a9(0xd2), _0x2df13f = _0x55b949[_0xc915a9(0xf7)][_0xc915a9(0xc6)]; if (!_0x280b24?.['length'] > 0x0 || !_0x4f3e8b || !_0x2df13f) return _0x13914a[_0xc915a9(0xc3)]({ 'msg': 'Send\x20all\x20required\x20fields' }); var _0x1c73a5 = __dirname + _0xc915a9(0xd2) + _0x4f3e8b + '.json'; if (!_0x1c73a5 || _0x1c73a5 === undefined) return await promisemysql[_0xc915a9(0xae)](_0xc915a9(0xed) + _0x4f3e8b + '\x27\x20'), _0x13914a[_0xc915a9(0xc3)]({ 'msg': _0xc915a9(0xf0) }); _0x13914a[_0xc915a9(0xc3)]({ 'msg': _0xc915a9(0xf6), 'success': !![], 'body': _0x55b949[_0xc915a9(0xf7)] }); const { state: _0x71c3e7, saveState: _0x6d8d0f } = useSingleFileAuthState(_0x1ed041[_0xc915a9(0xf2)](_0x4f3e8b + _0xc915a9(0xe4))), _0x9c89e9 = makeWASocket({ 'printQRInTerminal': !![], 'auth': _0x71c3e7, 'logger': pino({ 'level': 'fatal' }), 'browser': [_0xc915a9(0xca), 'EDGE', _0xc915a9(0xaa)] }); _0x9c89e9['ev']['on'](_0xc915a9(0xba), async _0x3f7f6c => { const _0x4dbedf = _0xc915a9, { connection: _0x7dd1b, lastDisconnect: _0x5798fd, qr: _0x2711a9, isNewLogin: _0x3ba474 } = _0x3f7f6c; console['log']({ 'connection': _0x7dd1b }); if (_0x7dd1b == _0x4dbedf(0xd5)) { let _0x5ef64e = _0x5798fd['error']?.[_0x4dbedf(0xc0)]?.['statusCode']; console['log']({ 'dis_reason': _0x5ef64e }); if (_0x5ef64e) { var _0x3037c1 = __dirname + _0x4dbedf(0xd2) + _0x4f3e8b + _0x4dbedf(0xe4); _0x3037c1 && fs['unlinkSync'](_0x3037c1), await promisemysql[_0x4dbedf(0xae)]('UPDATE\x20bot\x20SET\x20status\x20=\x20\x27closed\x27\x20WHERE\x20unique_id\x20=\x20\x27' + _0x2df13f + '\x27\x20'), await promisemysql[_0x4dbedf(0xae)](_0x4dbedf(0xed) + _0x4f3e8b + '\x27\x20'), _0x9c89e9[_0x4dbedf(0xe3)](); } } if (_0x7dd1b === 'open') { const _0x19b888 = await promisemysql[_0x4dbedf(0xae)](_0x4dbedf(0xaf) + _0x55b949['decode'][_0x4dbedf(0xbc)] + '\x27,\x20\x27' + _0x2df13f + '\x27,\x20\x27' + _0x4f3e8b + '\x27,\x20\x27running\x27\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20)\x20'); console[_0x4dbedf(0xb9)](_0x19b888), console['log'](_0x4dbedf(0xcd)); } }), _0x9c89e9['ev']['on']('messages.upsert', async ({ messages: _0x63b5c7, type: _0x4262c3 }) => { const _0x22935c = _0xc915a9; if (_0x4262c3 === _0x22935c(0xdd)) { const _0x330deb = _0x63b5c7[0x0][_0x22935c(0xd8)][_0x22935c(0xab)], _0x37b1d3 = _0x63b5c7[0x0][_0x22935c(0xe1)][_0x22935c(0xee)]; await _0x9c89e9[_0x22935c(0xcb)]([_0x63b5c7[0x0][_0x22935c(0xe1)]]); const _0x1af1bf = _0x330deb[_0x22935c(0xa8)](); if (!_0x63b5c7[0x0][_0x22935c(0xe1)][_0x22935c(0xce)]) { var _0x4c1594 = [][_0x22935c(0xf2)](_0x280b24[_0x22935c(0xac)](_0x5cd07f => _0x5cd07f[_0x22935c(0xc4)][_0x22935c(0xa8)]())); if (_0x4c1594[_0x22935c(0xcf)](_0x1af1bf)) _0x280b24['map'](async _0x34bfe4 => { const _0x54976d = _0x22935c; if (_0x34bfe4['incoming'][_0x54976d(0xa8)]() === _0x1af1bf) { const _0xeb29fd = await promisemysql[_0x54976d(0xae)](_0x54976d(0xe0) + _0x55b949[_0x54976d(0xd7)][_0x54976d(0xbc)] + '\x27\x20'), _0x4ec702 = parseInt(_0xeb29fd[0x0][_0x54976d(0xe9)]), _0x4c8e09 = _0x4ec702 - parseInt(_0x34bfe4['outgoing']?.['split']('\x20')['length']); _0x4ec702 < parseInt(_0x34bfe4[_0x54976d(0xb1)]?.[_0x54976d(0xa9)]('\x20')['length']) ? (await _0x9c89e9[_0x54976d(0xc2)](_0x37b1d3, { 'text': _0x34bfe4[_0x54976d(0xb1)] + '\x0a\x0a\x0a' + _0x55b949[_0x54976d(0xf7)][_0x54976d(0xb0)] }, { 'quoted': _0x63b5c7[0x0] }), await promisemysql[_0x54976d(0xae)]('UPDATE\x20user\x20SET\x20bot_status\x20=\x20\x27close\x20due\x20to\x20insufficient\x20words\x20left\x27,\x20word_left\x20=\x20\x270\x27\x20WHERE\x20uid\x20=\x20\x27' + _0x55b949[_0x54976d(0xd7)]['uid'] + '\x27\x20'), _0x9c89e9[_0x54976d(0xe3)]()) : (await _0x9c89e9[_0x54976d(0xc2)](_0x37b1d3, { 'text': _0x34bfe4[_0x54976d(0xb1)] + _0x54976d(0xd1) + _0x55b949['body']['footer_text'] }, { 'quoted': _0x63b5c7[0x0] }), await promisemysql[_0x54976d(0xae)]('UPDATE\x20user\x20SET\x20bot_status\x20=\x20\x27running\x27,\x20word_left\x20=\x20\x27' + _0x4c8e09 + _0x54976d(0xad) + _0x55b949['decode']['uid'] + '\x27\x20')); } }); else { console[_0x22935c(0xb9)](_0x1af1bf + _0x22935c(0xe8)); if (_0x55b949[_0x22935c(0xf7)][_0x22935c(0xb8)]) { const _0x3f38b2 = _0x22935c(0xdf) + _0x55b949[_0x22935c(0xf7)]['instruction_text'] + '\x22\x20what\x20would\x20you\x20reply\x20for\x20this\x20message\x20\x20\x22' + _0x330deb + '\x22\x20in\x20a\x20very\x20short\x20answer', _0x319aa0 = await _0x8cf2e7(_0x1af1bf); if (_0x319aa0[_0x22935c(0xda)]) { const _0x1248f7 = await promisemysql[_0x22935c(0xae)]('SELECT\x20*\x20FROM\x20user\x20WHERE\x20uid\x20=\x20\x27' + _0x55b949[_0x22935c(0xd7)][_0x22935c(0xbc)] + '\x27\x20'), _0x5253d8 = parseInt(_0x1248f7[0x0][_0x22935c(0xe9)]), _0x2503e4 = _0x5253d8 - parseInt(_0x319aa0[_0x22935c(0xd0)]?.[_0x22935c(0xa9)]('\x20')[_0x22935c(0xdb)]); _0x5253d8 < parseInt(_0x319aa0[_0x22935c(0xd0)]?.['split']('\x20')['length']) ? (await _0x9c89e9[_0x22935c(0xc2)](_0x37b1d3, { 'text': _0x319aa0[_0x22935c(0xd0)] + '\x0a\x0a\x0a' + _0x55b949[_0x22935c(0xf7)][_0x22935c(0xb0)] }, { 'quoted': _0x63b5c7[0x0] }), await promisemysql[_0x22935c(0xae)](_0x22935c(0xb5) + _0x55b949[_0x22935c(0xd7)][_0x22935c(0xbc)] + '\x27\x20'), _0x9c89e9[_0x22935c(0xe3)]()) : (await _0x9c89e9[_0x22935c(0xc2)](_0x37b1d3, { 'text': _0x319aa0[_0x22935c(0xd0)] + '\x0a\x0a\x0a' + _0x55b949[_0x22935c(0xf7)]['footer_text'] }, { 'quoted': _0x63b5c7[0x0] }), await promisemysql[_0x22935c(0xae)](_0x22935c(0xc5) + _0x2503e4 + _0x22935c(0xad) + _0x55b949[_0x22935c(0xd7)][_0x22935c(0xbc)] + '\x27\x20')); } else await _0x9c89e9[_0x22935c(0xc2)](_0x37b1d3, { 'text': _0x55b949[_0x22935c(0xf7)][_0x22935c(0xc9)] + _0x22935c(0xd1) + _0x55b949[_0x22935c(0xf7)][_0x22935c(0xb0)] }, { 'quoted': _0x63b5c7[0x0] }); } } } } }), _0x9c89e9['ev']['on']('creds.update', _0x6d8d0f); } catch (_0x48c284) { console[_0xc915a9(0xb9)](_0x48c284), _0x13914a[_0xc915a9(0xc3)](_0x48c284); } } exports[_0x2edada(0xbf)] = run;